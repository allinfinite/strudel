---
import HeadCommon from '../components/HeadCommon.astro';
import HeadSEO from '../components/HeadSEO.astro';
import Header from '../components/Header/Header.astro';
import * as CONFIG from '../config';

const frontmatter = {
  title: "Webcam Music Visualizer",
  description: "Move, gesture, and create music with your camera!",
  dir: "ltr",
  lang: "en"
};

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const currentPage = Astro.url.pathname;
---

<html dir={frontmatter.dir ?? 'ltr'} lang={frontmatter.lang ?? 'en'} class="initial dark">
  <head>
    <HeadCommon />
    <HeadSEO frontmatter={frontmatter} canonicalUrl={canonicalURL} />
    <title>
      {frontmatter.title ? `${frontmatter.title} üåÄ ${CONFIG.SITE.title}` : CONFIG.SITE.title}
    </title>
  </head>

  <body class="h-app-height m-0 text-gray-50 bg-background">
    <div class="w-full h-full">
      <main class="w-full h-full">
        <div class="w-full h-full">
  <div class="webcam-music-container">
    <div class="header">
      <h1>üéµ Webcam Music Visualizer</h1>
      <p>Move, gesture, and create music with your camera!</p>
    </div>

    <div class="main-content">
      <div class="wireframe-panel">
        <h3>üé≠ Wireframe Mesh</h3>
        <canvas id="wireframeCanvas"></canvas>
      </div>
    </div>

    <div class="controls">
      <button id="startBtn" class="btn btn-primary">‚ñ∂ Start Music</button>
      <button id="stopBtn" class="btn btn-secondary" disabled>‚ñ† Stop Music</button>
      <div class="status">
        <div id="statusIndicator" class="status-indicator"></div>
        <span id="statusText">Ready to start</span>
      </div>
    </div>

    <div class="mode-selector">
      <label>Musical Mode:</label>
      <div class="mode-buttons">
        <button class="mode-btn active" data-mode="sparse">üåô Sparse</button>
        <button class="mode-btn" data-mode="melodic">üéµ Melodic</button>
        <button class="mode-btn" data-mode="rhythmic">ü•Å Rhythmic</button>
        <button class="mode-btn" data-mode="structured">üéπ Structured</button>
      </div>
    </div>

    <div id="infoPanel" class="info-panel">
      <div id="modeDisplay" class="mode-display mode-sparse">SPARSE</div>
      <div class="stats">
        <div class="stat">
          <div class="stat-label">Brightness</div>
          <div id="brightness" class="stat-value">0</div>
        </div>
        <div class="stat">
          <div class="stat-label">Motion</div>
          <div id="motion" class="stat-value">0</div>
        </div>
        <div class="stat">
          <div class="stat-label">Saturation</div>
          <div id="saturation" class="stat-value">0</div>
        </div>
        <div class="stat">
          <div class="stat-label">Hue</div>
          <div id="hue" class="stat-value">0</div>
        </div>
      </div>
    </div>

    <div id="loading" class="loading">
      <h3>üéµ Loading Music System</h3>
      <p>Initializing webcam and audio...</p>
      <div class="spinner"></div>
    </div>
  </div>

  <style>
    .webcam-music-container {
      min-height: 100vh;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      display: flex;
      flex-direction: column;
      padding: 20px;
      position: relative;
    }

    .header {
      text-align: center;
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      border-radius: 15px;
      padding: 20px;
      border: 1px solid rgba(255, 255, 255, 0.2);
      margin-bottom: 20px;
    }

    .header h1 {
      font-size: 2.5em;
      margin-bottom: 10px;
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
    }

    .header p {
      opacity: 0.8;
      font-size: 1.1em;
    }

    .main-content {
      display: flex;
      justify-content: center;
      flex: 1;
      margin-bottom: 20px;
    }

    .wireframe-panel {
      background: rgba(0, 0, 0, 0.3);
      border-radius: 15px;
      border: 1px solid rgba(255, 255, 255, 0.2);
      backdrop-filter: blur(10px);
      position: relative;
      overflow: hidden;
      min-height: 500px;
      width: 80%;
      max-width: 800px;
    }

    .wireframe-panel h3 {
      position: absolute;
      top: 15px;
      left: 20px;
      z-index: 10;
      background: rgba(0, 0, 0, 0.5);
      padding: 8px 15px;
      border-radius: 20px;
      font-size: 0.9em;
    }

    #wireframeCanvas {
      width: 100%;
      height: 100%;
      border-radius: 15px;
    }

    .controls {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 20px;
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      border-radius: 15px;
      padding: 20px;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .mode-selector {
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      border-radius: 15px;
      padding: 20px;
      border: 1px solid rgba(255, 255, 255, 0.2);
      margin: 10px 0;
    }

    .mode-selector label {
      display: block;
      font-size: 1em;
      font-weight: bold;
      margin-bottom: 15px;
      text-align: center;
    }

    .mode-buttons {
      display: flex;
      justify-content: center;
      gap: 10px;
      flex-wrap: wrap;
    }

    .mode-btn {
      padding: 12px 24px;
      font-size: 1em;
      font-weight: 600;
      border: 2px solid rgba(255, 255, 255, 0.3);
      border-radius: 20px;
      background: rgba(255, 255, 255, 0.1);
      color: white;
      cursor: pointer;
      transition: all 0.3s ease;
      backdrop-filter: blur(5px);
    }

    .mode-btn:hover {
      background: rgba(255, 255, 255, 0.2);
      border-color: rgba(255, 255, 255, 0.5);
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
    }

    .mode-btn.active {
      background: linear-gradient(45deg, #667eea, #764ba2);
      border-color: white;
      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
    }

    .btn {
      padding: 15px 30px;
      font-size: 1.1em;
      font-weight: bold;
      border: none;
      border-radius: 25px;
      cursor: pointer;
      transition: all 0.3s ease;
      text-transform: uppercase;
      letter-spacing: 1px;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }

    .btn-primary {
      background: linear-gradient(45deg, #4CAF50, #45a049);
      color: white;
    }

    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4);
    }

    .btn-secondary {
      background: linear-gradient(45deg, #f44336, #d32f2f);
      color: white;
    }

    .btn-secondary:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(244, 67, 54, 0.4);
    }

    .btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      transform: none;
    }

    .status {
      display: flex;
      align-items: center;
      gap: 10px;
      font-size: 1.1em;
    }

    .status-indicator {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      background: #f44336;
      animation: pulse 2s infinite;
    }

    .status-indicator.active {
      background: #4CAF50;
    }

    @keyframes pulse {
      0% { opacity: 1; }
      50% { opacity: 0.5; }
      100% { opacity: 1; }
    }

    .info-panel {
      position: fixed;
      top: 20px;
      right: 20px;
      background: rgba(0, 0, 0, 0.8);
      backdrop-filter: blur(10px);
      border-radius: 15px;
      padding: 20px;
      border: 1px solid rgba(255, 255, 255, 0.2);
      min-width: 250px;
      display: none;
    }

    .info-panel.show {
      display: block;
    }

    .mode-display {
      font-size: 1.5em;
      font-weight: bold;
      margin-bottom: 15px;
      text-align: center;
      padding: 10px;
      border-radius: 10px;
      background: rgba(255, 255, 255, 0.1);
    }

    .mode-ambient { background: linear-gradient(45deg, #2196F3, #1976D2); }
    .mode-melodic { background: linear-gradient(45deg, #9C27B0, #7B1FA2); }
    .mode-energetic { background: linear-gradient(45deg, #FF9800, #F57C00); }
    .mode-chaotic { background: linear-gradient(45deg, #F44336, #D32F2F); }
    .mode-minimal { background: linear-gradient(45deg, #607D8B, #455A64); }

    .stats {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 10px;
      font-size: 0.9em;
    }

    .stat {
      background: rgba(255, 255, 255, 0.1);
      padding: 8px;
      border-radius: 8px;
      text-align: center;
    }

    .stat-label {
      opacity: 0.7;
      font-size: 0.8em;
    }

    .stat-value {
      font-weight: bold;
      font-size: 1.1em;
    }

    .loading {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(0, 0, 0, 0.9);
      backdrop-filter: blur(10px);
      border-radius: 15px;
      padding: 40px;
      text-align: center;
      border: 1px solid rgba(255, 255, 255, 0.2);
      display: none;
    }

    .loading.show {
      display: block;
    }

    .loading h3 {
      margin-bottom: 20px;
      font-size: 1.5em;
    }

    .loading p {
      opacity: 0.7;
      margin-bottom: 20px;
    }

    .spinner {
      width: 40px;
      height: 40px;
      border: 4px solid rgba(255, 255, 255, 0.3);
      border-top: 4px solid #4CAF50;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin: 0 auto;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    @media (max-width: 768px) {
      .main-content {
        grid-template-columns: 1fr;
        gap: 15px;
      }
      
      .header h1 {
        font-size: 2em;
      }
      
      .info-panel {
        position: relative;
        top: auto;
        right: auto;
        margin-top: 20px;
      }
    }
  </style>

  <script>
    // Import the webcam music system from the sensors package
    import { enableWebcam, startWebcamMusic, stopWebcamAudio } from '@strudel/sensors';

    class WebcamMusicApp {
      constructor() {
        this.wireframeCanvas = document.getElementById('wireframeCanvas');
        this.wireframeCtx = this.wireframeCanvas.getContext('2d');
        
        // Video processing
        this.videoCanvas = document.createElement('canvas');
        this.videoCanvas.width = 40;
        this.videoCanvas.height = 30;
        this.videoCtx = this.videoCanvas.getContext('2d');
        
        // Animation
        this.time = 0;
        
        // Audio system
        this.audioContext = null;
        this.isAudioInitialized = false;
        this.activeOscillators = new Map();
        this.activeFilters = new Map();
        this.activeEnvelopes = new Map();
        
        // Musical layers
        this.bassLayer = new Map();
        this.melodyLayer = new Map();
        this.harmonyLayer = new Map();
        this.percussionLayer = new Map();
        this.ambientLayer = new Map();
        
        // Point tracking
        this.activePoints = new Set();
        this.lastFrameData = null;
        this.lastBrightness = null;
        
        // Master clock and timing
        this.masterClock = null;
        this.currentStep = 0;
        this.stepsPerBeat = 4; // 16th notes
        this.quantizedNotes = [];
        this.bpm = 120;
        this.beatDuration = 60000 / this.bpm; // ms per beat
        
        // Polyphony limiting
        this.maxPolyphony = 6;
        this.priorityQueue = [];
        
        // Musical structure
        this.currentMusicMode = 'sparse';
        this.lastModeChange = 0;
        this.modeChangeCooldown = 2000; // 2 seconds
        
        // Harmonic system
        this.currentKey = 'C';
        this.currentScale = [1, 9/8, 5/4, 3/2, 5/3]; // Pentatonic scale ratios (major pentatonic: C D E G A)
        this.chordProgression = [1, 6, 4, 5]; // I-vi-IV-V progression
        
        // Beat layer
        this.beatIntensity = 0.5;
        this.metronomeEnabled = true;
        
        this.startBtn = document.getElementById('startBtn');
        this.stopBtn = document.getElementById('stopBtn');
        this.statusIndicator = document.getElementById('statusIndicator');
        this.statusText = document.getElementById('statusText');
        this.loading = document.getElementById('loading');
        this.infoPanel = document.getElementById('infoPanel');
        
        this.modeDisplay = document.getElementById('modeDisplay');
        this.brightnessDisplay = document.getElementById('brightness');
        this.motionDisplay = document.getElementById('motion');
        this.saturationDisplay = document.getElementById('saturation');
        this.hueDisplay = document.getElementById('hue');
        
        // Mode selector buttons
        this.modeButtons = document.querySelectorAll('.mode-btn');
        
        this.isInitialized = false;
        this.isPlaying = false;
        this.animationFrame = null;
        
        // Webcam video element
        this.video = null;
        
        this.setupEventListeners();
        this.setupCanvas();
      }
      
      setupEventListeners() {
        this.startBtn.addEventListener('click', () => this.start());
        this.stopBtn.addEventListener('click', () => this.stop());
        
        // Mode selector buttons
        this.modeButtons.forEach(btn => {
          btn.addEventListener('click', () => {
            const newMode = btn.dataset.mode;
            this.setMode(newMode);
            
            // Update active button
            this.modeButtons.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
          });
        });
      }
      
      setMode(mode) {
        this.currentMusicMode = mode;
        this.updateModeDisplay(mode);
        
        // Adjust beat intensity based on mode
        switch (mode) {
          case 'sparse':
            this.beatIntensity = 0.2;
            break;
          case 'melodic':
            this.beatIntensity = 0.4;
            break;
          case 'rhythmic':
            this.beatIntensity = 0.8;
            break;
          case 'structured':
            this.beatIntensity = 0.6;
            break;
        }
        
        console.log('üéµ Mode manually set to:', mode, '(beat intensity:', this.beatIntensity.toFixed(2), ')');
      }
      
      setupCanvas() {
        const updateCanvasSize = () => {
          const rect = this.wireframeCanvas.parentElement.getBoundingClientRect();
          this.wireframeCanvas.width = rect.width;
          this.wireframeCanvas.height = rect.height;
        };
        
        updateCanvasSize();
        window.addEventListener('resize', updateCanvasSize);
      }
      
      async start() {
        try {
          this.showLoading(true);
          this.updateStatus('Initializing webcam...', false);
          
          await enableWebcam();
          
          // Get the video element from the webcam system
          import('@strudel/sensors').then(({ webcam }) => {
            if (webcam && webcam.video) {
              this.video = webcam.video;
            }
          });
          
          // Initialize our custom audio system
          this.initAudioSystem();
          this.startMasterClock();
          
          await startWebcamMusic();
          
          this.isInitialized = true;
          this.isPlaying = true;
          
          this.showLoading(false);
          this.updateStatus('Music system active!', true);
          this.startBtn.disabled = true;
          this.stopBtn.disabled = false;
          this.infoPanel.classList.add('show');
          
          this.startWireframeAnimation();
          this.startModeMonitoring();
          
        } catch (error) {
          this.showLoading(false);
          this.updateStatus('Error: ' + error.message, false);
          alert('Error: ' + error.message + '\n\nPlease allow camera access and try again.');
        }
      }
      
      stop() {
        this.isPlaying = false;
        this.isInitialized = false;
        
        stopWebcamAudio();
        this.stopAllAudio();
        
        if (this.animationFrame) {
          cancelAnimationFrame(this.animationFrame);
        }
        
        this.wireframeCtx.clearRect(0, 0, this.wireframeCanvas.width, this.wireframeCanvas.height);
        
        this.startBtn.disabled = false;
        this.stopBtn.disabled = true;
        this.infoPanel.classList.remove('show');
        this.updateStatus('Ready to start', false);
        
        this.time = 0;
      }
      
      showLoading(show) {
        this.loading.classList.toggle('show', show);
      }
      
      updateStatus(text, active) {
        this.statusText.textContent = text;
        this.statusIndicator.classList.toggle('active', active);
      }
      
      startWireframeAnimation() {
        const animate = (currentTime) => {
          if (!this.isPlaying) return;
          
          const dt = currentTime - (this.lastTime || currentTime);
          this.lastTime = currentTime;
          this.time += dt / 1000;
          
          this.drawWireframeMesh();
          
          this.animationFrame = requestAnimationFrame(animate);
        };
        
        this.animationFrame = requestAnimationFrame(animate);
      }
      
      startModeMonitoring() {
        setInterval(() => {
          if (!this.isPlaying || !this.video) return;
          
          // Get values from our own analysis
          const currentValues = this.getCurrentWebcamValues();
          
          if (currentValues) {
            this.updateUI({
              hue: currentValues.hue.toFixed(0),
              brightness: currentValues.brightness.toFixed(0),
              motion: currentValues.motion.toFixed(0),
              saturation: currentValues.saturation.toFixed(0)
            });
            
            // Update rotation speed based on motion
            this.rotationSpeed = 0.3 + currentValues.motion * 1.0;
          }
          
          // Import the webcam object to get mode
          import('@strudel/sensors').then(({ webcam, getCurrentMode }) => {
            if (webcam && webcam.isInitialized) {
              // Update mode display
              const currentMode = getCurrentMode ? getCurrentMode() : 'energetic';
              this.updateModeDisplay(currentMode);
            }
          });
        }, 100);
      }
      
      getCurrentWebcamValues() {
        if (!this.video || this.video.readyState < 2) return null;
        
        try {
          // Process current video frame
          this.videoCtx.save();
          this.videoCtx.scale(-1, 1);
          this.videoCtx.drawImage(this.video, -40, 0, 40, 30);
          this.videoCtx.restore();
          const frame = this.videoCtx.getImageData(0, 0, 40, 30);
          
          // Analyze the frame
          const data = frame.data;
          let totalR = 0, totalG = 0, totalB = 0;
          let totalBrightness = 0;
          let totalSaturation = 0;
          let totalHue = 0;
          let pixelCount = 0;
          
          // Sample every 4th pixel for performance
          for (let i = 0; i < data.length; i += 16) {
            const r = data[i];
            const g = data[i + 1];
            const b = data[i + 2];
            
            totalR += r;
            totalG += g;
            totalB += b;
            
            // Calculate brightness
            const brightness = (r + g + b) / 3 / 255;
            totalBrightness += brightness;
            
            // Calculate HSL
            const hsl = this.rgbToHsl(r, g, b);
            totalHue += hsl.h;
            totalSaturation += hsl.s;
            
            pixelCount++;
          }
          
          const avgR = totalR / pixelCount;
          const avgG = totalG / pixelCount;
          const avgB = totalB / pixelCount;
          const avgBrightness = totalBrightness / pixelCount;
          const avgHue = totalHue / pixelCount;
          const avgSaturation = totalSaturation / pixelCount;
          
          // Calculate motion (simplified - compare with previous frame)
          const motion = this.calculateMotion(avgBrightness);
          
          return {
            hue: avgHue * 360,
            brightness: avgBrightness * 100,
            motion: motion * 100,
            saturation: avgSaturation * 100,
            r: avgR / 255,
            g: avgG / 255,
            b: avgB / 255
          };
        } catch (error) {
          console.error('Error analyzing webcam frame:', error);
          return null;
        }
      }
      
      calculateMotion(currentBrightness) {
        // Simple motion detection based on brightness changes
        if (!this.lastBrightness) {
          this.lastBrightness = currentBrightness;
          return 0;
        }
        
        const motion = Math.abs(currentBrightness - this.lastBrightness);
        this.lastBrightness = currentBrightness;
        
        // Smooth the motion value
        return Math.min(motion * 10, 1);
      }
      
      updateModeDisplay(mode) {
        this.modeDisplay.textContent = mode.toUpperCase();
        this.modeDisplay.className = `mode-display mode-${mode}`;
      }
      
      initAudioSystem() {
        if (this.isAudioInitialized) return;
        
        this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
        this.isAudioInitialized = true;
        console.log('üéµ Dynamic wireframe audio system initialized!');
      }
      
      startMasterClock() {
        if (this.masterClock) return;
        
        const stepDuration = this.beatDuration / this.stepsPerBeat;
        
        this.masterClock = setInterval(() => {
          this.currentStep = (this.currentStep + 1) % (this.stepsPerBeat * 4); // 4 beats per measure
          
          // Process quantized notes
          this.processQuantizedNotes();
          
          // Play metronome
          if (this.metronomeEnabled) {
            this.playMetronome();
          }
          
        }, stepDuration);
        
        console.log('üéº Master clock started at', this.bpm, 'BPM');
      }
      
      quantizeToGrid(noteData) {
        const currentTime = this.audioContext.currentTime;
        const stepDuration = this.beatDuration / this.stepsPerBeat / 1000; // Convert to seconds
        const stepsToNextBeat = this.stepsPerBeat - (this.currentStep % this.stepsPerBeat);
        const nextBeatTime = currentTime + (stepsToNextBeat * stepDuration);
        
        return {
          ...noteData,
          scheduledTime: nextBeatTime,
          step: (this.currentStep + stepsToNextBeat) % (this.stepsPerBeat * 4)
        };
      }
      
      processQuantizedNotes() {
        // Process any notes scheduled for this step
        const currentTime = this.audioContext.currentTime;
        const tolerance = 0.05; // 50ms tolerance in seconds
        
        for (let i = this.quantizedNotes.length - 1; i >= 0; i--) {
          const note = this.quantizedNotes[i];
          if (note.scheduledTime <= currentTime + tolerance) {
            this.playQuantizedNote(note);
            this.quantizedNotes.splice(i, 1);
          }
        }
      }
      
      playQuantizedNote(noteData) {
        // Check polyphony limit
        if (this.activeOscillators.size >= this.maxPolyphony) {
          this.stopLowestPriorityNote();
        }
        
        // Create the note
        this.createPointAudio(
          noteData.x, 
          noteData.y, 
          noteData.depth, 
          noteData.hue, 
          noteData.saturation, 
          noteData.brightness
        );
      }
      
      stopAllAudio() {
        // Stop master clock
        if (this.masterClock) {
          clearInterval(this.masterClock);
          this.masterClock = null;
        }
        
        // Stop all oscillators
        this.activeOscillators.forEach((osc, key) => {
          osc.stop();
          osc.disconnect();
        });
        this.activeOscillators.clear();
        
        // Stop all filters
        this.activeFilters.forEach((filter, key) => {
          filter.disconnect();
        });
        this.activeFilters.clear();
        
        // Stop all envelopes
        this.activeEnvelopes.forEach((env, key) => {
          env.disconnect();
        });
        this.activeEnvelopes.clear();
        
        // Clear all layers
        this.bassLayer.clear();
        this.melodyLayer.clear();
        this.harmonyLayer.clear();
        this.percussionLayer.clear();
        this.ambientLayer.clear();
        
        this.activePoints.clear();
        this.quantizedNotes = [];
        this.priorityQueue = [];
      }
      
      stopLowestPriorityNote() {
        if (this.activeOscillators.size === 0) return;
        
        // Find the note with lowest priority (quietest)
        // In sparse mode, prefer keeping bass notes; in rhythmic mode, prefer percussion
        let lowestPriority = Infinity;
        let lowestKey = null;
        
        this.activeOscillators.forEach((osc, key) => {
          const gainNode = this.activeEnvelopes.get(key);
          let priority = gainNode ? gainNode.gain.value : 0;
          
          // Boost priority for bass notes in sparse/melodic modes
          if (this.currentMusicMode === 'sparse' || this.currentMusicMode === 'melodic') {
            if (this.bassLayer.has(key)) {
              priority *= 2; // Double priority for bass
            }
          }
          
          // Boost priority for percussion in rhythmic mode
          if (this.currentMusicMode === 'rhythmic') {
            if (this.percussionLayer.has(key)) {
              priority *= 2;
            }
          }
          
          if (priority < lowestPriority) {
            lowestPriority = priority;
            lowestKey = key;
          }
        });
        
        if (lowestKey) {
          this.stopPointAudio(lowestKey);
        }
      }
      
      playMetronome() {
        if (!this.isAudioInitialized) return;
        
        // Kick on beat 1, hi-hat on other beats
        const isKick = this.currentStep === 0;
        const isHiHat = this.currentStep % this.stepsPerBeat === 0 && this.currentStep !== 0;
        
        if (isKick) {
          this.playKick();
        } else if (isHiHat) {
          this.playHiHat();
        }
      }
      
      playKick() {
        const oscillator = this.audioContext.createOscillator();
        const gainNode = this.audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(this.audioContext.destination);
        
        oscillator.type = 'sine';
        oscillator.frequency.setValueAtTime(60, this.audioContext.currentTime);
        oscillator.frequency.exponentialRampToValueAtTime(30, this.audioContext.currentTime + 0.1);
        
        gainNode.gain.setValueAtTime(this.beatIntensity * 0.3, this.audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.001, this.audioContext.currentTime + 0.2);
        
        oscillator.start();
        oscillator.stop(this.audioContext.currentTime + 0.2);
      }
      
      playHiHat() {
        const bufferSize = this.audioContext.sampleRate * 0.1;
        const buffer = this.audioContext.createBuffer(1, bufferSize, this.audioContext.sampleRate);
        const data = buffer.getChannelData(0);
        
        for (let i = 0; i < bufferSize; i++) {
          data[i] = (Math.random() * 2 - 1) * Math.pow(1 - i / bufferSize, 2);
        }
        
        const source = this.audioContext.createBufferSource();
        const gainNode = this.audioContext.createGain();
        
        source.buffer = buffer;
        source.connect(gainNode);
        gainNode.connect(this.audioContext.destination);
        
        gainNode.gain.setValueAtTime(this.beatIntensity * 0.1, this.audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.001, this.audioContext.currentTime + 0.1);
        
        source.start();
        source.stop(this.audioContext.currentTime + 0.1);
      }
      
      createPointAudio(x, y, depth, hue, saturation, brightness) {
        const pointId = `${x}-${y}`;
        
        if (this.activePoints.has(pointId)) return;
        
        this.activePoints.add(pointId);
        
        // Create oscillator
        const oscillator = this.audioContext.createOscillator();
        const gainNode = this.audioContext.createGain();
        const filter = this.audioContext.createBiquadFilter();
        const reverb = this.audioContext.createConvolver();
        
        // Connect audio graph
        oscillator.connect(filter);
        filter.connect(gainNode);
        gainNode.connect(this.audioContext.destination);
        
        // Set oscillator properties based on position and depth
        const baseFreq = this.getFrequencyFromPosition(x, y, depth, hue);
        oscillator.frequency.setValueAtTime(baseFreq, this.audioContext.currentTime);
        
        // Waveform based on saturation
        const waveforms = ['sine', 'triangle', 'sawtooth', 'square'];
        oscillator.type = waveforms[Math.floor(saturation * waveforms.length)];
        
        // Filter based on brightness
        filter.type = 'lowpass';
        filter.frequency.setValueAtTime(200 + brightness * 2000, this.audioContext.currentTime);
        filter.Q.setValueAtTime(1 + depth * 10, this.audioContext.currentTime);
        
        // Gain based on depth
        const volume = 0.1 + depth * 0.3;
        gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);
        gainNode.gain.linearRampToValueAtTime(volume, this.audioContext.currentTime + 0.1);
        
        // Store references
        this.activeOscillators.set(pointId, oscillator);
        this.activeFilters.set(pointId, filter);
        this.activeEnvelopes.set(pointId, gainNode);
        
        // Add to appropriate layer
        this.addToMusicalLayer(pointId, x, y, depth, baseFreq);
        
        // Start oscillator
        oscillator.start();
        
        // Auto-stop after duration (from musical layer)
        const layerData = this.getLayerData(pointId);
        const duration = layerData ? layerData.duration : (1000 + depth * 2000);
        
        setTimeout(() => {
          this.stopPointAudio(pointId);
        }, duration);
      }
      
      stopPointAudio(pointId) {
        if (!this.activePoints.has(pointId)) return;
        
        this.activePoints.delete(pointId);
        
        const gainNode = this.activeEnvelopes.get(pointId);
        const oscillator = this.activeOscillators.get(pointId);
        const filter = this.activeFilters.get(pointId);
        
        if (gainNode) {
          gainNode.gain.linearRampToValueAtTime(0, this.audioContext.currentTime + 0.5);
          setTimeout(() => {
            oscillator?.stop();
            oscillator?.disconnect();
            filter?.disconnect();
            gainNode.disconnect();
            
            this.activeOscillators.delete(pointId);
            this.activeFilters.delete(pointId);
            this.activeEnvelopes.delete(pointId);
          }, 500);
        }
      }
      
      getFrequencyFromPosition(x, y, depth, hue) {
        // Create harmonic relationships based on position
        const baseNote = 220; // A3
        
        // X position affects octave (limited to 3 octaves)
        const octave = Math.floor((x / 40) * 3) + 1;
        
        // Y position affects scale degree (use pentatonic for safety)
        const scaleDegree = Math.floor((y / 30) * this.currentScale.length);
        const ratio = this.currentScale[scaleDegree] || 1;
        
        // Snap to scale (remove microtonal tuning for better harmony)
        const frequency = baseNote * octave * ratio;
        
        // Depth affects harmonic overtones (limited to prevent harsh sounds)
        const harmonic = 1 + Math.floor(depth * 2);
        
        return this.snapToScale(frequency * harmonic);
      }
      
      snapToScale(frequency) {
        // Find the closest note in the current scale
        const baseFreq = 220; // A3
        const octave = Math.floor(Math.log2(frequency / baseFreq));
        const normalizedFreq = frequency / (baseFreq * Math.pow(2, octave));
        
        // Find closest scale degree
        let closestRatio = this.currentScale[0];
        let minDistance = Math.abs(normalizedFreq - closestRatio);
        
        for (const ratio of this.currentScale) {
          const distance = Math.abs(normalizedFreq - ratio);
          if (distance < minDistance) {
            minDistance = distance;
            closestRatio = ratio;
          }
        }
        
        return baseFreq * Math.pow(2, octave) * closestRatio;
      }
      
      addToMusicalLayer(pointId, x, y, depth, frequency) {
        // Mode-specific layer assignment
        switch (this.currentMusicMode) {
          case 'sparse':
            // Only bass and ambient layers
            if (y > 20) {
              this.bassLayer.set(pointId, {
                frequency: frequency * 0.5,
                type: 'bass',
                x, y, depth,
                duration: 4000 + depth * 2000 // Long sustains
              });
            }
            if (depth > 0.9) {
              this.ambientLayer.set(pointId, {
                frequency: frequency * 0.25,
                type: 'ambient',
                x, y, depth,
                duration: 6000 + depth * 2000 // Very long sustains
              });
            }
            break;
            
          case 'melodic':
            // Arpeggiated patterns
            if (y > 10) {
              this.melodyLayer.set(pointId, {
                frequency: frequency,
                type: 'melody',
                x, y, depth,
                duration: 1000 + depth * 1000 // Medium length
              });
            }
            if (y > 20) {
              this.bassLayer.set(pointId, {
                frequency: frequency * 0.5,
                type: 'bass',
                x, y, depth,
                duration: 2000 + depth * 1000
              });
            }
            break;
            
          case 'rhythmic':
            // Shorter, percussive notes
            this.percussionLayer.set(pointId, {
              frequency: frequency * 2,
              type: 'percussion',
              x, y, depth,
              duration: 200 + depth * 300 // Short, punchy
            });
            if (y > 20) {
              this.bassLayer.set(pointId, {
                frequency: frequency * 0.5,
                type: 'bass',
                x, y, depth,
                duration: 500 + depth * 500 // Short bass hits
              });
            }
            break;
            
          case 'structured':
            // Full harmonic structure
            if (y > 20) {
              this.bassLayer.set(pointId, {
                frequency: frequency * 0.5,
                type: 'bass',
                x, y, depth,
                duration: 1500 + depth * 1000
              });
            } else if (y > 10) {
              this.melodyLayer.set(pointId, {
                frequency: frequency,
                type: 'melody',
                x, y, depth,
                duration: 1000 + depth * 1000
              });
            } else {
              this.harmonyLayer.set(pointId, {
                frequency: frequency * 1.5,
                type: 'harmony',
                x, y, depth,
                duration: 2000 + depth * 1000
              });
            }
            break;
        }
      }
      
      getLayerData(pointId) {
        // Check all layers for this point
        const layers = [this.bassLayer, this.melodyLayer, this.harmonyLayer, this.percussionLayer, this.ambientLayer];
        
        for (const layer of layers) {
          if (layer.has(pointId)) {
            return layer.get(pointId);
          }
        }
        
        return null;
      }
      
      updateUI(values) {
        if (values.hue) this.hueDisplay.textContent = values.hue;
        if (values.brightness) this.brightnessDisplay.textContent = values.brightness;
        if (values.motion) this.motionDisplay.textContent = values.motion;
        if (values.saturation) this.saturationDisplay.textContent = values.saturation;
      }
      
      drawWireframeMesh() {
        const ctx = this.wireframeCtx;
        const width = this.wireframeCanvas.width;
        const height = this.wireframeCanvas.height;
        
        ctx.clearRect(0, 0, width, height);
        
        if (!this.isInitialized || !this.video || !this.isAudioInitialized) {
          this.drawInstructions(ctx, width, height);
          return;
        }
        
        // Process video frame
        this.videoCtx.save();
        this.videoCtx.scale(-1, 1);
        this.videoCtx.drawImage(this.video, -40, 0, 40, 30);
        this.videoCtx.restore();
        const frame = this.videoCtx.getImageData(0, 0, 40, 30);
        
        // Create depth map and color data
        const depthMap = this.createDepthMap(frame);
        const colorMap = this.createColorMap(frame);
        
        // Process audio for active points
        this.processAudioPoints(depthMap, colorMap);
        
        // Draw mirrored wireframe mesh with audio visualization
        this.drawMesh(depthMap, colorMap, width, height);
      }
      
      createColorMap(imageData) {
        const data = imageData.data;
        const colorMap = [];
        
        for (let y = 0; y < 30; y++) {
          colorMap[y] = [];
          for (let x = 0; x < 40; x++) {
            const idx = (y * 40 + x) * 4;
            const r = data[idx];
            const g = data[idx + 1];
            const b = data[idx + 2];
            
            // Convert RGB to HSL
            const hsl = this.rgbToHsl(r, g, b);
            colorMap[y][x] = hsl;
          }
        }
        
        return colorMap;
      }
      
      processAudioPoints(depthMap, colorMap) {
        // Check for significant changes in depth or color
        const threshold = 0.1;
        
        for (let y = 0; y < 30; y++) {
          for (let x = 0; x < 40; x++) {
            const depth = depthMap[y][x];
            const color = colorMap[y][x];
            
            // Only create audio for significant depth changes
            if (depth > threshold) {
              const pointId = `${x}-${y}`;
              
              // Check if this point should trigger audio based on current mode
              if (!this.activePoints.has(pointId) && this.shouldTriggerNote(depth, color)) {
                // Queue note for quantization instead of playing immediately
                const noteData = {
                  x, y, depth,
                  hue: color.h, 
                  saturation: color.s, 
                  brightness: color.l
                };
                
                this.quantizedNotes.push(this.quantizeToGrid(noteData));
              }
            }
          }
        }
      }
      
      shouldTriggerNote(depth, color) {
        // Mode-based triggering logic
        switch (this.currentMusicMode) {
          case 'sparse':
            return depth > 0.7; // Only very deep points
          case 'melodic':
            return depth > 0.4; // Medium threshold
          case 'rhythmic':
            return depth > 0.2; // Lower threshold for more notes
          case 'structured':
            return depth > 0.5 && color.s > 0.3; // Colorful and deep
          default:
            return depth > 0.3;
        }
      }
      
      // Mode is now manually controlled via UI buttons
      // evaluateMusicMode() method removed - mode switching is user-controlled
      
      createDepthMap(imageData) {
        const data = imageData.data;
        const depthMap = [];
        
        for (let y = 0; y < 30; y++) {
          depthMap[y] = [];
          for (let x = 0; x < 40; x++) {
            const idx = (y * 40 + x) * 4;
            const gray = (data[idx] + data[idx + 1] + data[idx + 2]) / 3;
            
            // Convert brightness to depth (darker = closer/higher)
            const depth = (255 - gray) / 255;
            depthMap[y][x] = depth;
          }
        }
        
        return depthMap;
      }
      
      drawMesh(depthMap, colorMap, width, height) {
        const ctx = this.wireframeCtx;
        
        // Scale to fit canvas
        const scaleX = width / 40;
        const scaleY = height / 30;
        const depthScale = 50;
        
        const baseHue = (this.time * 60) % 360;
        
        // Pulse effect on beats - more prominent on downbeat
        const beatPulse = this.currentStep === 0 ? 1.8 : 
                         (this.currentStep % this.stepsPerBeat === 0 ? 1.3 : 1.0);
        
        // Draw horizontal lines
        for (let y = 0; y < 30; y++) {
          const points = [];
          
          for (let x = 0; x < 40; x++) {
            const depth = depthMap[y][x];
            
            // Simple 2D projection with depth offset
            const x2d = x * scaleX;
            const y2d = y * scaleY + depth * depthScale;
            
            points.push({ x: x2d, y: y2d, depth: depth });
          }
          
          // Draw line connecting points
          if (points.length > 1) {
            const hue = (baseHue + y * 5) % 360;
            const color = this.hslToHex(hue, 80, 60);
            
            // Make active points brighter
            const pointId = `${0}-${y}`;
            const isActive = this.activePoints.has(pointId);
            const alpha = isActive ? 1.0 : 0.6;
            
            ctx.strokeStyle = color;
            ctx.lineWidth = (isActive ? 3 : 2) * beatPulse;
            ctx.globalAlpha = alpha * beatPulse;
            ctx.beginPath();
            ctx.moveTo(points[0].x, points[0].y);
            
            for (let i = 1; i < points.length; i++) {
              ctx.lineTo(points[i].x, points[i].y);
            }
            ctx.stroke();
          }
        }
        
        // Draw vertical lines
        for (let x = 0; x < 40; x++) {
          const points = [];
          
          for (let y = 0; y < 30; y++) {
            const depth = depthMap[y][x];
            
            // Simple 2D projection with depth offset
            const x2d = x * scaleX;
            const y2d = y * scaleY + depth * depthScale;
            
            points.push({ x: x2d, y: y2d, depth: depth });
          }
          
          if (points.length > 1) {
            const hue = (baseHue + x * 5 + 60) % 360;
            const color = this.hslToHex(hue, 80, 60);
            
            // Make active points brighter
            const pointId = `${x}-${0}`;
            const isActive = this.activePoints.has(pointId);
            const alpha = isActive ? 1.0 : 0.6;
            
            ctx.strokeStyle = color;
            ctx.lineWidth = (isActive ? 3 : 2) * beatPulse;
            ctx.globalAlpha = alpha * beatPulse;
            ctx.beginPath();
            ctx.moveTo(points[0].x, points[0].y);
            
            for (let i = 1; i < points.length; i++) {
              ctx.lineTo(points[i].x, points[i].y);
            }
            ctx.stroke();
          }
        }
        
        ctx.globalAlpha = 1;
      }
      
      rgbToHsl(r, g, b) {
        r /= 255;
        g /= 255;
        b /= 255;
        
        const max = Math.max(r, g, b);
        const min = Math.min(r, g, b);
        let h = 0;
        let s = 0;
        const l = (max + min) / 2;
        
        if (max !== min) {
          const d = max - min;
          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
          
          switch (max) {
            case r:
              h = (g - b) / d + (g < b ? 6 : 0);
              break;
            case g:
              h = (b - r) / d + 2;
              break;
            case b:
              h = (r - g) / d + 4;
              break;
          }
          h /= 6;
        }
        
        return { h: h, s: s, l: l };
      }
      
      drawInstructions(ctx, width, height) {
        const hue = (this.time * 60) % 360;
        const color = this.hslToHex(hue, 80, 60);
        
        ctx.fillStyle = color;
        ctx.globalAlpha = 0.8;
        ctx.font = 'bold 24px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('Enable Webcam', width / 2, height / 2);
        ctx.globalAlpha = 1;
      }
      
      hslToHex(h, s, l) {
        h /= 360;
        s /= 100;
        l /= 100;
        
        const hue2rgb = (p, q, t) => {
          if (t < 0) t += 1;
          if (t > 1) t -= 1;
          if (t < 1/6) return p + (q - p) * 6 * t;
          if (t < 1/2) return q;
          if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;
          return p;
        };
        
        let r, g, b;
        
        if (s === 0) {
          r = g = b = l; // achromatic
        } else {
          const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          const p = 2 * l - q;
          r = hue2rgb(p, q, h + 1/3);
          g = hue2rgb(p, q, h);
          b = hue2rgb(p, q, h - 1/3);
        }
        
        const toHex = (c) => {
          const hex = Math.round(c * 255).toString(16);
          return hex.length === 1 ? '0' + hex : hex;
        };
        
        return `#${toHex(r)}${toHex(g)}${toHex(b)}`;
      }
      
      
    }

    // Initialize the app when the page loads
    document.addEventListener('DOMContentLoaded', () => {
      new WebcamMusicApp();
    });
  </script>
          </div>
        </div>
      </main>
    </div>
  </body>
</html>
